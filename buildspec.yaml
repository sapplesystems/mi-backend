version: 0.2

env:
  variables:
    # Optional: set a default container name if your pipeline expects imagedefinitions.json
    CONTAINER_NAME: app

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      # Use AWS_DEFAULT_REGION (present in CodeBuild)
      - export REGION="${AWS_DEFAULT_REGION}"
      # Standard login: pipe password straight to docker login
      - aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"
      # Define repo URI and short image tag (first 7 chars of commit)
      - export REPO_URI="$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME"
      - export IMAGE_TAG="${CODEBUILD_RESOLVED_SOURCE_VERSION:0:7}"
      - echo "Repo: $REPO_URI  Tag: $IMAGE_TAG"
  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building the Docker image..."
      # Pull cache if available (wonâ€™t fail the build if missing)
      - docker pull "$REPO_URI:latest" || true
      # Build with cache and tag both :latest and :$IMAGE_TAG
      - docker build --cache-from "$REPO_URI:latest" -t "$REPO_URI:latest" -t "$REPO_URI:$IMAGE_TAG" .
  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing the Docker images..."
      - docker push "$REPO_URI:latest"
      - docker push "$REPO_URI:$IMAGE_TAG"
      - echo "Writing image definitions file..."
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$REPO_URI:$IMAGE_TAG" | tee imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
