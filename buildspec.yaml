version: 0.2

phases:
  pre_build:
    commands:
      - "echo Logging in to Amazon ECR..."
      - "aws --version || echo AWS CLI missing"
      - "docker --version || (echo Docker not available. Enable Privileged mode & use a Docker-capable image.; exit 1)"
      - "[ -z \"${AWS_DEFAULT_REGION:-}\" ] && [ -n \"${AWS_REGION:-}\" ] && export AWS_DEFAULT_REGION=\"$AWS_REGION\" || true"
      - "[ -n \"${AWS_DEFAULT_REGION:-}\" ] || (echo Region not set. Set AWS_DEFAULT_REGION or AWS_REGION.; exit 1)"
      - "echo Account: $AWS_ACCOUNT_ID  Region: $AWS_DEFAULT_REGION  Repo: $IMAGE_REPO_NAME"
      - "aws sts get-caller-identity || (echo STS failed â€” check CodeBuild role permissions/credentials; exit 1)"
      - "export REGISTRY_URI=\"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\""
      - "export REPO_URI=\"$REGISTRY_URI/$IMAGE_REPO_NAME\""
      - "aws ecr describe-repositories --repository-names \"$IMAGE_REPO_NAME\" --region \"$AWS_DEFAULT_REGION\" >/dev/null 2>&1 || (echo ECR repo '$IMAGE_REPO_NAME' not found in $AWS_DEFAULT_REGION for $AWS_ACCOUNT_ID; exit 1)"
      - "aws ecr get-login-password --region \"$AWS_DEFAULT_REGION\" | docker login --username AWS --password-stdin \"$REGISTRY_URI\""
      - "COMMIT_HASH=$(echo \"${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest}\" | cut -c 1-7) && export IMAGE_TAG=${COMMIT_HASH:-latest}"

  build:
    commands:
      - "echo Build started on $(date)"
      - "echo Building Docker image $REPO_URI:$IMAGE_TAG"
      - "docker pull \"$REPO_URI:latest\" || true"
      - "docker build --cache-from \"$REPO_URI:latest\" -t \"$REPO_URI:latest\" -t \"$REPO_URI:$IMAGE_TAG\" ."

  post_build:
    commands:
      - "echo Build completed on $(date)"
      - "echo Pushing Docker images..."
      - "docker push \"$REPO_URI:latest\""
      - "docker push \"$REPO_URI:$IMAGE_TAG\""
      - "echo Writing image definitions..."
      - "printf '[{\"name\":\"%s\",\"imageUri\":\"%s\"}]' \"$CONTAINER_NAME\" \"$REPO_URI:$IMAGE_TAG\" > imagedefinitions.json"

artifacts:
  files:
    - imagedefinitions.json
